(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{527:function(e,n,t){"use strict";t.r(n),n.default="(async function () {\n  const {Renderer} = meshjs;\n  const canvas = document.querySelector('canvas');\n\n  /* globals Proton, MeshRenderer */\n  const proton = new Proton();\n  const emitter = new Proton.Emitter();\n\n  emitter.rate = new Proton.Rate(new Proton.Span(5, 13), 0.1);\n\n  emitter.addInitialize(new Proton.Mass(1));\n  emitter.addInitialize(new Proton.P(new Proton.CircleZone(300, 500, 10)));\n  emitter.addInitialize(new Proton.Life(5, 7));\n  emitter.addInitialize(new Proton.V(new Proton.Span(2, 3), new Proton.Span(0, 30, true), 'polar'));\n\n  emitter.addBehaviour(new Proton.Scale(1, 0.2));\n  emitter.addBehaviour(new Proton.Alpha(1, 0.2));\n\n  emitter.emit();\n  proton.addEmitter(emitter);\n\n  // add renderer\n  const renderer = new Renderer(canvas);\n  const gl = renderer.glRenderer.gl;\n  gl.blendFunc(gl.ONE, gl.ONE);\n  const textureURL = 'https://p0.ssl.qhimg.com/t018109a4ae06d3e4d0.png';\n  const texture = await renderer.loadTexture(textureURL);\n  emitter.addInitialize(new Proton.Body(texture));\n  const meshRenderer = new MeshRenderer(renderer);\n  proton.addRenderer(meshRenderer);\n  // const canvasRenderer = new Proton.CanvasRenderer(canvas);\n  // proton.addRenderer(canvasRenderer);\n\n  // use Euler integration calculation is more accurate (default false)\n  Proton.USE_CLOCK = false;\n  // proton.update()\n  function tick() {\n    requestAnimationFrame(tick);\n    proton.update();\n  }\n  tick();\n}());"}}]);