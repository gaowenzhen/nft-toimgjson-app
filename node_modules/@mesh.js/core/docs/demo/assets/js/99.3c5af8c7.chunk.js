(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{524:function(n,e,t){"use strict";t.r(e),e.default="const {Renderer, Figure2D, Mesh2D} = meshjs;\n\nconst canvas = document.querySelector('canvas');\nconst renderer = new Renderer(canvas, {\n  contextType: 'webgl2',\n});\n\nconst vertShader = `\n  attribute vec3 a_vertexPosition;\n\n  void main() {\n    gl_PointSize = 1.0;\n    gl_Position = vec4(a_vertexPosition.xy, 1.0, 1.0);\n  }\n`;\n\nconst fragShader = `\nprecision mediump float;\n\nhighp float random(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n// Value Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/lsf3WH\nhighp float noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix( mix( random( i + vec2(0.0,0.0) ),\n                    random( i + vec2(1.0,0.0) ), u.x),\n                mix( random( i + vec2(0.0,1.0) ),\n                    random( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n#ifndef OCTAVES\n#define OCTAVES 6\n#endif\nfloat mist(vec2 st) {\n  //Initial values\n  float value = 0.0;\n  float amplitude = 0.5;\n  float frequency = 0.0;\n\n  // Loop of octaves\n  for(int i = 0; i < OCTAVES; i++) {\n    value += amplitude * noise(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n  }\n  return value;\n}\n\n//  Function from I\xf1igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb(vec3 c){\n  vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0), 6.0)-3.0)-1.0, 0.0, 1.0);\n  rgb = rgb * rgb * (3.0 - 2.0 * rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nuniform float u_time;\nuniform vec2 u_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / u_resolution;\n  st.x += 0.1 * u_time; \n  gl_FragColor = vec4(hsb2rgb(vec3(mist(st), 1.0, 1.0)),1.0);\n}\n`;\n\nconst program = renderer.glRenderer.compileSync(fragShader, vertShader);\n\nconst wings = [[2, 126, 86, 60], [2, 64, 86, 60], [2, 2, 86, 60]];\nconst textureURL = 'https://p.ssl.qhimg.com/d/inn/c886d09f/birds.png';\n\n(async function () {\n  const birdRect = [0, 0, 43, 30];\n  const birdTexture = await renderer.loadTexture(textureURL);\n\n  const figure = new Figure2D();\n  figure.rect(...birdRect);\n\n  const bird = new Mesh2D(figure, canvas);\n  bird.translate(279, 135);\n  bird.setTexture(birdTexture, {\n    rect: birdRect,\n    srcRect: wings[0],\n  });\n  let i = 0;\n  setInterval(() => {\n    bird.setTexture(birdTexture, {\n      rect: birdRect,\n      srcRect: wings[++i % 3],\n    });\n  }, 100);\n\n  const background = new Figure2D();\n  background.rect(0, 0, canvas.width, canvas.height);\n\n  const sky = new Mesh2D(background, canvas);\n  sky.setUniforms({\n    u_color: [1, 0, 1, 1],\n    u_resolution: [canvas.width, canvas.height],\n  });\n\n  function update(t) {\n    renderer.clear();\n    sky.setUniforms({\n      u_time: t / 1000,\n      u_resolution: [canvas.width, canvas.height],\n    });\n    renderer.drawMeshes([sky], {program});\n    renderer.drawMeshes([bird]);\n    requestAnimationFrame(update);\n  }\n  update(0);\n}());"}}]);